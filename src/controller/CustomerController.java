/**
 * Heaven-leigh Michelle Masters
 * C195 Software II Advanced Java Concepts
 * QAM1 Task 1: Java Application Development
 * controller for customer scene
 */
package controller;

import databaseAccess.DbCustomers;
import databaseAccess.DbLocations;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.*;

import java.io.IOException;

/**
 * controller for 'Customer.fxml'
 */
public class CustomerController {

        @FXML // fx:id="customerTableView"
        private TableView<Customer> customerTableView; // Value injected by FXMLLoader

        @FXML // fx:id="customerIDColumn"
        private TableColumn<Customer, Integer> customerIDColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerNameColumn"
        private TableColumn<Customer, String> customerNameColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerPhoneNumberColumn"
        private TableColumn<Customer, String> customerPhoneNumberColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerAddressColumn"
        private TableColumn<Customer, String> customerAddressColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerPostalCodeColumn"
        private TableColumn<Customer, String> customerPostalCodeColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerCountryColumn"
        private TableColumn<Customer, String> customerCountryColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerFirstLevelDivisionColumn"
        private TableColumn<Customer, Integer> customerFirstLevelDivisionColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerDivisionLabel"
        private Label customerDivisionLabel; // Value injected by FXMLLoader

        @FXML // fx:id="customerIDAutoGeneratedText"
        private Label customerIDAutoGeneratedText; // Value injected by FXMLLoader

        @FXML // fx:id="customerNameText"
        private TextField customerNameText; // Value injected by FXMLLoader

        @FXML // fx:id="customerPhoneNumberText"
        private TextField customerPhoneNumberText; // Value injected by FXMLLoader

        @FXML // fx:id="customerAddressText"
        private TextField customerAddressText; // Value injected by FXMLLoader

        @FXML // fx:id="customerPostalCodeText"
        private TextField customerPostalCodeText; // Value injected by FXMLLoader

        @FXML // fx:id="customerCountryCombo"
        private ComboBox<Country> customerCountryCombo; // Value injected by FXMLLoader

        @FXML // fx:id="customerDivisionCombo"
        private ComboBox<Division>  customerDivisionCombo; // Value injected by FXMLLoader

        private ObservableList<Division> divisionList = FXCollections.observableArrayList();

        /**
         * loads the customer table with the list of customers obtained from the database
         */
        public void loadCustomersTable() {

                try {

                customerTableView.setItems(CustomerList.provideCustomerList());

                customerIDColumn.setCellValueFactory(new PropertyValueFactory<>("customerID"));
                customerNameColumn.setCellValueFactory(new PropertyValueFactory<>("name"));
                customerPhoneNumberColumn.setCellValueFactory(new PropertyValueFactory<>("phoneNum"));
                customerAddressColumn.setCellValueFactory(new PropertyValueFactory<>("address"));
                customerPostalCodeColumn.setCellValueFactory(new PropertyValueFactory<>("postalCode"));
                customerCountryColumn.setCellValueFactory(new PropertyValueFactory<>("country"));
                customerFirstLevelDivisionColumn.setCellValueFactory(new PropertyValueFactory<>("division"));

                } catch (Exception e) {
                        e.printStackTrace();
                }

        }

        /**
         * initializes the edit form for customers, setting combo boxes, and next ID.
         */
        public void initializeAddEditCustomer() {

                customerIDAutoGeneratedText.setText(String.valueOf(DbCustomers.getNextCustomerID()));
                customerCountryCombo.setItems(Country.provideCountryList());
        }

        /**
         * clears the customer edit form when the clear button is pressed (calls clearCustomerAddEdit())
         */
        @FXML
        void OnCustomerClearButton() {

                clearCustomerAddEdit();
        }

        /**
         * when a user selects a country from the country combo box any prior divisions are reset to match the country
         */
        @FXML
        void OnCustomerCountryCombo() {

                Country selectedCountry;

                try {
                        selectedCountry = customerCountryCombo.getSelectionModel().getSelectedItem();

                        if (selectedCountry != null) {

                                divisionList.clear();

                                // clearing division list so that only divisions from current country show
                                customerDivisionCombo.getSelectionModel().clearSelection();
                                customerDivisionCombo.setValue(null);

                                // clearing current division;
                                divisionList = DbLocations.getDivisions(selectedCountry);
                                customerDivisionCombo.setItems(divisionList);
                                customerDivisionLabel.setVisible(true);
                                customerDivisionCombo.setVisible(true);
                        }

                } catch (Exception e) {
                        e.printStackTrace();
                }
        }

        /**
         * saves customer information entered in edit screen as a new customer object and adds to the database and list
         */
        @FXML
        void OnCustomerSaveButton() {

                try {

                        int customerID = Integer.valueOf(customerIDAutoGeneratedText.getText());
                        String customerName = customerNameText.getText();
                        String customerPhoneNum = customerPhoneNumberText.getText();
                        String customerAddress = customerAddressText.getText();
                        String customerPostal = customerPostalCodeText.getText();
                        int customerDivisionID = customerDivisionCombo.getSelectionModel().getSelectedItem().getDivisionID();

                        Customer customer = new Customer(customerID, customerName, customerPhoneNum, customerAddress, customerPostal,
                                DbLocations.getCountryByDivisionID(customerDivisionID), DbLocations.getDivision(customerDivisionID));

                        // if new customer add directly to customer list
                        if (customerID == DbCustomers.getNextCustomerID()) {
                                CustomerList.addToCustomerList(customer);
                        }

                        // else update customer and remove old and add new customer information in customer list
                        else {
                                CustomerList.updateCustomer(customer);
                        }

                        DbCustomers.saveCustomertoDB(customerID, customerName, customerPhoneNum, customerAddress,
                                customerPostal, customerDivisionID);

                } catch (Exception e) {
                        e.printStackTrace();
                }

                clearCustomerAddEdit();

        }

        /**
         * deletes a customer, if selected, by first confirming to the user that appointments will delete too,
         * then deletes all appointments before deleting the customer and providing a dialog either
         * explaining which appointments were deleted or that the customer has no appointments
         * also throws an error if the user did not select a customer to delete
         */
        @FXML
        void OnDeleteCustomerButton() {

                Customer selectedCustomer = customerTableView.getSelectionModel().getSelectedItem();

                if (selectedCustomer != null) {

                        ObservableList<Appointment> filteredApptsByCustomer = AppointmentCalendar.filterApptByCustomer(selectedCustomer);
                        String deleteConfirmString = "" +
                                selectedCustomer + " still has the appointments: " + filteredApptsByCustomer +
                                ". Confirm that you wish to delete these appointments and the customer.";

                        if (!filteredApptsByCustomer.isEmpty()) {

                                if (ControllerUtilities.DeleteConfirmation(deleteConfirmString)) {

                                        for (Appointment appt: filteredApptsByCustomer) {
                                                AppointmentCalendar.deleteAppointment(appt);
                                        }

                                        CustomerList.deleteCustomer(selectedCustomer);
                                        ControllerUtilities.InformationalDialog("Customer deleted successfully",
                                                "Appointment(s): " + filteredApptsByCustomer + " were deleted " +
                                                        " and the customer, " + selectedCustomer + ", was deleted successfully.");
                                        return;
                                }
                        }

                        else {
                                CustomerList.deleteCustomer(selectedCustomer);
                                ControllerUtilities.InformationalDialog("Customer deleted successfully",
                                        ""+  selectedCustomer + " had no appointments and was deleted successfully.");
                                return;
                        }
                }

                ControllerUtilities.ErrorException("No customer selected", "To delete a customer, first select a customer" +
                        " to delete.");
        }

        /**
         * loads the customer information into edit form if customer selected
         * provides dialog box to the user if one is not selected
         */
        @FXML
        void OnEditCustomerButton() {

                Customer customer = customerTableView.getSelectionModel().getSelectedItem();

                if (customer != null) {

                        customerIDAutoGeneratedText.setText(String.valueOf(customer.getCustomerID()));
                        customerNameText.setText(customer.getName());
                        customerPhoneNumberText.setText(customer.getPhoneNum());
                        customerAddressText.setText(customer.getAddress());
                        customerPostalCodeText.setText(customer.getPostalCode());
                        customerCountryCombo.setValue(customer.getCountry());
                        customerDivisionCombo.setValue(customer.getDivision());
                }

                else {
                        ControllerUtilities.ErrorException("No customer selected", "To edit a customer, first select a customer" +
                                " to edit.");
                }
        }

        /**
         * loads the main scene when the user selects the exit button on the customer screen.
         * @param event passed from the button to the loading of the main scene
         * @throws IOException is thrown if an input output error occurs
         */
        @FXML
        void OnExitCustomerScreenButton(ActionEvent event) throws IOException {

                MainAppointmentController.loadMain(event);
        }

        /**
         * loads the customer scene including loading the customer table and initializing the edit form
         * @param event passed from the button that opens the customer scene
         * @throws IOException is thrown if there is an issue with loading
         */
        public static void loadCustomerScene(ActionEvent event) throws IOException {
                FXMLLoader loader = new FXMLLoader();
                loader.setLocation(CustomerController.class.getResource("/view/Customer.fxml"));
                Parent root = loader.load();
                Scene scene = new Scene(root);

                CustomerController controller = loader.getController();
                controller.loadCustomersTable();
                controller.initializeAddEditCustomer();

                Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                ControllerUtilities.centerStage(stage, 1283, 774);
                stage.setTitle("Customers");
                stage.setScene(scene);
                stage.show();
        }

        /**
         * clears the customer edit form, including resetting the combo boxes and setting the division combo invisible
         */
        public void clearCustomerAddEdit() {

                customerIDAutoGeneratedText.setText(String.valueOf(DbCustomers.getNextCustomerID()));
                customerNameText.clear();
                customerPhoneNumberText.clear();
                customerAddressText.clear();
                customerPostalCodeText.clear();
                customerCountryCombo.getSelectionModel().clearSelection();
                customerCountryCombo.setValue(null);
                customerDivisionCombo.getSelectionModel().clearSelection();
                customerDivisionLabel.setVisible(false);
                customerDivisionCombo.setVisible(false);
                customerTableView.getSelectionModel().clearSelection();
        }
    }


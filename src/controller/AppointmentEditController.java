/**
 * Sample Skeleton for 'AppointmentEditScreen.fxml' Controller Class
 */


package controller;

import databaseAccess.*;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.*;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

public class AppointmentEditController {

        @FXML // fx:id="EditApptButton"
        private Button EditApptButton; // Value injected by FXMLLoader

        @FXML // fx:id="DeleteApptButton"
        private Button DeleteApptButton; // Value injected by FXMLLoader

        @FXML // fx:id="apptTableView"
        private TableView<Appointment> apptTableView; // Value injected by FXMLLoader

        @FXML // fx:id="startDateTimeColumn"
        private TableColumn<Appointment, String> startDateTimeColumn; // Value injected by FXMLLoader

        @FXML // fx:id="apptIDColumn"
        private TableColumn<Appointment, Integer> apptIDColumn; // Value injected by FXMLLoader

        @FXML // fx:id="apptTitleColumn"
        private TableColumn<Appointment, String> apptTitleColumn; // Value injected by FXMLLoader

        @FXML // fx:id="descriptionColumn"
        private TableColumn<Appointment, String> descriptionColumn; // Value injected by FXMLLoader

        @FXML // fx:id="typeColumn"
        private TableColumn<Appointment, String> typeColumn; // Value injected by FXMLLoader

        @FXML // fx:id="locationColumn"
        private TableColumn<Appointment, String> locationColumn; // Value injected by FXMLLoader

        @FXML // fx:id="contactColumn"
        private TableColumn<Appointment, String> contactColumn; // Value injected by FXMLLoader

        @FXML // fx:id="customerColumn"
        private TableColumn<Appointment, String> customerColumn; // Value injected by FXMLLoader

        @FXML // fx:id="endDateTimeColumn"
        private TableColumn<Appointment, String> endDateTimeColumn; // Value injected by FXMLLoader

        @FXML // fx:id="apptIDAutoGeneratedText"
        private Label apptIDAutoGeneratedText; // Value injected by FXMLLoader

        @FXML // fx:id="apptTitleText"
        private TextField apptTitleText; // Value injected by FXMLLoader

        @FXML // fx:id="apptDescriptionText"
        private TextField apptDescriptionText; // Value injected by FXMLLoader

        @FXML // fx:id="apptTypeText"
        private TextField apptTypeText; // Value injected by FXMLLoader

        @FXML // fx:id="apptLocationText"
        private TextField apptLocationText; // Value injected by FXMLLoader

        @FXML // fx:id="apptCustomerCombo"
        private ComboBox<Customer> apptCustomerCombo; // Value injected by FXMLLoader

        @FXML // fx:id="ApptStartTimeCombo"
        private ComboBox<LocalTime> apptStartTimeCombo; // Value injected by FXMLLoader

        @FXML // fx:id="apptEndTimeCombo"
        private ComboBox<LocalTime> apptEndTimeCombo; // Value injected by FXMLLoader

        @FXML // fx:id="apptContactCombo"
        private ComboBox<Contact> apptContactCombo; // Value injected by FXMLLoader

        @FXML // fx:id="apptUserCombo"
        private ComboBox<User> apptUserCombo; // Value injected by FXMLLoader

        @FXML // fx:id="apptStartDatePicker"
        private DatePicker apptStartDatePicker; // Value injected by FXMLLoader

        @FXML // fx:id="apptEndDatePicker"
        private DatePicker apptEndDatePicker; // Value injected by FXMLLoader

        @FXML // fx:id="ApptSaveButton"
        private Button ApptSaveButton; // Value injected by FXMLLoader

        @FXML // fx:id="ApptClearButton"
        private Button ApptClearButton; // Value injected by FXMLLoader

        @FXML // fx:id="ApptEditScreenExit"
        private Button ApptEditScreenExit; // Value injected by FXMLLoader

        public ObservableList<Appointment> apptList = FXCollections.observableArrayList();
        private ObservableList<Contact> contactList = FXCollections.observableArrayList();
        private ObservableList<Customer> customerList = FXCollections.observableArrayList();
        private ObservableList<User> userList = FXCollections.observableArrayList();
        private ObservableList<LocalTime> startTimeList = FXCollections.observableArrayList();
        private ObservableList<LocalTime> endTimeList = FXCollections.observableArrayList();

        private static final int startHourEST = 8;
        private static final int startMinuteEST = 0;
        private static final int hoursOpen = 14;
        private static final int endHourEST = 8;
        private static final int endMinuteEST = 15;

        public void loadAppointmentsTable() {

                try {

                        AppointmentCalendar.getAllAppointmentsFromDB();
                        System.out.println("Got all Appointments from Database");

                        apptTableView.setItems(AppointmentCalendar.provideApptList());
                        System.out.println("Set list in tableview");

                        startDateTimeColumn.setCellValueFactory(new PropertyValueFactory<>("formattedStart"));
                        apptIDColumn.setCellValueFactory(new PropertyValueFactory<>("apptID"));
                        apptTitleColumn.setCellValueFactory(new PropertyValueFactory<>("title"));
                        descriptionColumn.setCellValueFactory(new PropertyValueFactory<>("description"));
                        typeColumn.setCellValueFactory(new PropertyValueFactory<>("type"));
                        locationColumn.setCellValueFactory(new PropertyValueFactory<>("location"));
                        contactColumn.setCellValueFactory(new PropertyValueFactory<>("contact"));
                        customerColumn.setCellValueFactory(new PropertyValueFactory<>("customer"));
                        endDateTimeColumn.setCellValueFactory(new PropertyValueFactory<>("formattedEnd"));

                } catch (Exception e) {

                        e.printStackTrace();
                }
        }

        public static void loadAddEditAppt(ActionEvent event) throws IOException {
                FXMLLoader loader = new FXMLLoader();
                loader.setLocation(AppointmentEditController.class.getResource("/view/AppointmentEditScreen.fxml"));
                Parent root = loader.load();
                Scene scene = new Scene(root);

                AppointmentEditController controller = loader.getController();
                controller.loadAppointmentsTable();
                controller.initializeAddEditAppt();

                Stage stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
                ControllerUtilities.centerStage(stage,1400, 845);
                stage.setTitle("Main Appointment");
                stage.setScene(scene);
                stage.show();
        }

        public void initializeAddEditAppt() {
                try {
                        apptIDAutoGeneratedText.setText(String.valueOf(DbAppointments.getNextApptID()));
                        contactList = Contact.provideContactList();
                        apptContactCombo.setItems(contactList);
                        customerList = Customer.provideCustomerList();
                        apptCustomerCombo.setItems(customerList);
                        userList = User.provideUserList();
                        apptUserCombo.setItems(userList);

                        startTimeList.addAll(utilities.TimeZoneConversions.getBusinessTimes(startHourEST, startMinuteEST, hoursOpen));
                        apptStartTimeCombo.setItems(startTimeList);
                        endTimeList.addAll(utilities.TimeZoneConversions.getBusinessTimes(endHourEST, endMinuteEST, hoursOpen));
                        apptEndTimeCombo.setItems(endTimeList);

                } catch (Exception e) {
                        e.printStackTrace();
                }
        }

        @FXML
        void OnEditApptButton() {
                Appointment appointment = apptTableView.getSelectionModel().getSelectedItem();
                apptIDAutoGeneratedText.setText(String.valueOf(appointment.getApptID()));
                apptTitleText.setText(appointment.getTitle());
                apptDescriptionText.setText(appointment.getDescription());
                apptTypeText.setText(appointment.getType());
                apptLocationText.setText(appointment.getLocation());
                apptContactCombo.setValue(appointment.getContact());
                apptCustomerCombo.setValue(appointment.getCustomer());
                apptUserCombo.setValue(appointment.getUser());
                apptStartDatePicker.setValue(appointment.getStartDate());
                apptStartTimeCombo.setValue(appointment.getStartTime());
                apptEndDatePicker.setValue(appointment.getEndDate());
                apptEndTimeCombo.setValue(appointment.getEndTime());
        }

        @FXML
        void OnDeleteApptButton() {
                Appointment selectedAppt = apptTableView.getSelectionModel().getSelectedItem();
                if (selectedAppt != null && ControllerUtilities.DeleteConfirmation("Confirm that you wish " +
                                "to delete " + selectedAppt)) {

                        DbAppointments.removeAppointment(selectedAppt);
                        AppointmentCalendar.deleteAppointment(selectedAppt);
                }

                else {
                        ControllerUtilities.ErrorException("No Appointment Selected", "Select an appointment in order to" +
                                " delete an appointment.");
                }

        }

        /**
         * saves the appointment with the information that is in the edit form to the database
         * and displays in the tableview
         * checks for any conflicting customer appointments before saving and shows error message,
         * if there is overlap (StartDate1 <= EndDate2) and (StartDate2 <= EndDate1)
         * @throws Exception
         */
        @FXML
        void OnApptSaveButton() {

                System.out.println("Pressed Saved Button");

                int apptID = Integer.valueOf(apptIDAutoGeneratedText.getText());
                String apptTitle = apptTitleText.getText();
                String apptDescription = apptDescriptionText.getText();
                String apptType = apptTypeText.getText();
                String apptLocation = apptLocationText.getText();
                int apptContactID = apptContactCombo.getSelectionModel().getSelectedItem().getContactID();
                int apptCustomerID = apptCustomerCombo.getSelectionModel().getSelectedItem().getCustomerID();
                int apptUserID = apptUserCombo.getSelectionModel().getSelectedItem().getUserID();
                LocalDate startDate = apptStartDatePicker.getValue();
                LocalTime startTime = apptStartTimeCombo.getValue();
                LocalDate endDate = apptEndDatePicker.getValue();
                LocalTime endTime = apptEndTimeCombo.getValue();

                LocalDateTime apptStart = startDate.atTime(startTime);
                LocalDateTime apptEnd = endDate.atTime(endTime);
                User apptUser = User.getUserByID(apptUserID);
                Contact apptContact = Contact.getContactByID(apptContactID);
                Customer apptCustomer = Customer.getCustomerByID(apptCustomerID);

                // check if end datetime is before start datetime
                if (apptStart.isAfter(apptEnd)) {
                        ControllerUtilities.ErrorException("Appointment end must be after start", " " +
                                "The start datetime " + apptStart + " is before the end datetime " +
                                apptEnd + ".  To save the appointment please make the end datetime after " +
                                " the start.");
                        return;
                }
                // check if customer's other appts overlap
                if (AppointmentCalendar.apptOverlapsForCustomer(apptCustomer, apptStart, apptEnd)) {
                        ControllerUtilities.ErrorException(apptCustomer + " is already booked for that time", "Please " +
                                "find a different time for their appointment.");
                        return;
                }

                //save to database and to application list
                DbAppointments.saveApptToDB(apptID, apptTitle, apptDescription, apptType, apptLocation, apptContactID, apptCustomerID,
                        apptUserID, startDate, startTime, endDate, endTime);

                Appointment appointment = new Appointment(apptID, apptTitle, apptDescription, apptLocation, apptType, apptStart, apptEnd, apptUser,
                        apptContact, apptCustomer);

                AppointmentCalendar.addApptToCalendar(appointment);

                apptTableView.setItems(AppointmentCalendar.provideApptList());

                clearApptAddEdit();
        }

        @FXML
        public void OnApptClearButton() {
                clearApptAddEdit();
        }

        public void clearApptAddEdit() {
                apptIDAutoGeneratedText.setText(String.valueOf(DbAppointments.getNextApptID()));
                apptTitleText.clear();
                apptDescriptionText.clear();
                apptTypeText.clear();
                apptLocationText.clear();
                apptContactCombo.getSelectionModel().clearSelection();
                apptContactCombo.setValue(null);
                apptCustomerCombo.getSelectionModel().clearSelection();
                apptCustomerCombo.setValue(null);
                apptUserCombo.getSelectionModel().clearSelection();
                apptUserCombo.setValue(null);
                apptStartDatePicker.setValue(null);
                apptStartTimeCombo.getSelectionModel().clearSelection();
                apptStartTimeCombo.setValue(null);
                apptEndDatePicker.setValue(null);
                apptEndTimeCombo.getSelectionModel().clearSelection();
                apptEndTimeCombo.setValue(null);
                apptTableView.getSelectionModel().clearSelection();
        }

        @FXML
        void OnApptEditScreenExit(ActionEvent event) throws IOException {

                MainAppointmentController.loadMain(event);
        }
    }

